
GPIO_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000302  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b5c  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f6  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b9  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ee  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007cc  00000000  00000000  0000211a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000028e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 93 00 	call	0x126	; 0x126 <main>
  64:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <hled_init>:

/*This function is responsible for initializing a chosen LED as OUTPUT*/
void hled_init(u8_t led_number)
{
	/*switch over the led number*/
	switch(led_number)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	51 f0       	breq	.+20     	; 0x84 <hled_init+0x18>
  70:	18 f0       	brcs	.+6      	; 0x78 <hled_init+0xc>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	69 f0       	breq	.+26     	; 0x90 <hled_init+0x24>
  76:	08 95       	ret
	{
		//setting led0 as output
		case LED0:
			mdio_pinStatus(LED0_PORT,LED0_PIN,OUTPUT);
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	64 e0       	ldi	r22, 0x04	; 4
  7c:	82 e0       	ldi	r24, 0x02	; 2
  7e:	0e 94 c2 00 	call	0x184	; 0x184 <mdio_pinStatus>
			break;
  82:	08 95       	ret
			
		//setting led1 as output	
		case LED1:
			mdio_pinStatus(LED1_PORT,LED2_PIN,OUTPUT);
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	68 e0       	ldi	r22, 0x08	; 8
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	0e 94 c2 00 	call	0x184	; 0x184 <mdio_pinStatus>
			break;
  8e:	08 95       	ret
		
		//setting led2 as output	
		case LED2:
			mdio_pinStatus(LED2_PORT,LED2_PIN,OUTPUT);
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	68 e0       	ldi	r22, 0x08	; 8
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	0e 94 c2 00 	call	0x184	; 0x184 <mdio_pinStatus>
  9a:	08 95       	ret

0000009c <hled_ledON>:

/*This function is responsible for setting the chosen LED to ON mode*/
void hled_ledON(u8_t led_number)
{
	/*switch over the led number*/
	switch(led_number)
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	51 f0       	breq	.+20     	; 0xb4 <hled_ledON+0x18>
  a0:	18 f0       	brcs	.+6      	; 0xa8 <hled_ledON+0xc>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	69 f0       	breq	.+26     	; 0xc0 <hled_ledON+0x24>
  a6:	08 95       	ret
	{
		//led0 on
		case LED0:
			mdio_setPinValue(LED0_PORT,LED0_PIN,HIGH);
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	64 e0       	ldi	r22, 0x04	; 4
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	0e 94 2b 01 	call	0x256	; 0x256 <mdio_setPinValue>
			break;
  b2:	08 95       	ret
		
		//led1 on
		case LED1:
			mdio_setPinValue(LED1_PORT,LED1_PIN,HIGH);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	60 e8       	ldi	r22, 0x80	; 128
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 2b 01 	call	0x256	; 0x256 <mdio_setPinValue>
			break;
  be:	08 95       	ret
		
		//led2 on
		case LED2:
			mdio_setPinValue(LED2_PORT,LED2_PIN,HIGH);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	68 e0       	ldi	r22, 0x08	; 8
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 2b 01 	call	0x256	; 0x256 <mdio_setPinValue>
  ca:	08 95       	ret

000000cc <hled_ledOFF>:

/*This function is responsible for setting the chosen LED to OFF mode*/
void hled_ledOFF(u8_t led_number)
{
	/*switch over the led number*/
	switch(led_number)
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	51 f0       	breq	.+20     	; 0xe4 <hled_ledOFF+0x18>
  d0:	18 f0       	brcs	.+6      	; 0xd8 <hled_ledOFF+0xc>
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	69 f0       	breq	.+26     	; 0xf0 <hled_ledOFF+0x24>
  d6:	08 95       	ret
	{
		//led0 OFF
		case LED0:
		mdio_setPinValue(LED0_PORT,LED0_PIN,LOW);
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	64 e0       	ldi	r22, 0x04	; 4
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	0e 94 2b 01 	call	0x256	; 0x256 <mdio_setPinValue>
		break;
  e2:	08 95       	ret
		
		//led1 OFF
		case LED1:
		mdio_setPinValue(LED1_PORT,LED1_PIN,LOW);
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	60 e8       	ldi	r22, 0x80	; 128
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 2b 01 	call	0x256	; 0x256 <mdio_setPinValue>
		break;
  ee:	08 95       	ret
		
		//led2 OFF
		case LED2:
		mdio_setPinValue(LED2_PORT,LED2_PIN,LOW);
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	68 e0       	ldi	r22, 0x08	; 8
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	0e 94 2b 01 	call	0x256	; 0x256 <mdio_setPinValue>
  fa:	08 95       	ret

000000fc <hled_ledToggle>:

/*This function is responsible for toggling the chosen LED to OFF mode*/
void hled_ledToggle(u8_t led_number)
{
	/*switch over the led number*/
	switch(led_number)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	49 f0       	breq	.+18     	; 0x112 <hled_ledToggle+0x16>
 100:	18 f0       	brcs	.+6      	; 0x108 <hled_ledToggle+0xc>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	59 f0       	breq	.+22     	; 0x11c <hled_ledToggle+0x20>
 106:	08 95       	ret
	{
		//led0 toggles
		case LED0:
		mdio_togglePinValue(LED0_PORT,LED0_PIN);
 108:	64 e0       	ldi	r22, 0x04	; 4
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	0e 94 67 01 	call	0x2ce	; 0x2ce <mdio_togglePinValue>
		break;
 110:	08 95       	ret
		
		//led1 toggles
		case LED1:
		mdio_togglePinValue(LED1_PORT,LED1_PIN);
 112:	60 e8       	ldi	r22, 0x80	; 128
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	0e 94 67 01 	call	0x2ce	; 0x2ce <mdio_togglePinValue>
		break;
 11a:	08 95       	ret
		
		//led2 toggles
		case LED2:
		mdio_togglePinValue(LED2_PORT,LED2_PIN);
 11c:	68 e0       	ldi	r22, 0x08	; 8
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	0e 94 67 01 	call	0x2ce	; 0x2ce <mdio_togglePinValue>
 124:	08 95       	ret

00000126 <main>:
#define Button1 PIN4
#define Button2 PIN2

int main(void)
{
	hled_init(0);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 36 00 	call	0x6c	; 0x6c <hled_init>
	hled_init(1);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 36 00 	call	0x6c	; 0x6c <hled_init>
	hled_init(2);
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 36 00 	call	0x6c	; 0x6c <hled_init>
	
	while (1)
	{
		hled_ledON(0);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 4e 00 	call	0x9c	; 0x9c <hled_ledON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	83 ed       	ldi	r24, 0xD3	; 211
 14a:	90 e3       	ldi	r25, 0x30	; 48
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x26>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x30>
 156:	00 00       	nop
		_delay_ms(1000);
		hled_ledOFF(0);
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 66 00 	call	0xcc	; 0xcc <hled_ledOFF>
		hled_ledToggle(1);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 7e 00 	call	0xfc	; 0xfc <hled_ledToggle>
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	83 ed       	ldi	r24, 0xD3	; 211
 16c:	90 e3       	ldi	r25, 0x30	; 48
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x48>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x52>
 178:	00 00       	nop
		_delay_ms(1000);
		hled_ledToggle(2);
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 7e 00 	call	0xfc	; 0xfc <hled_ledToggle>
 182:	dd cf       	rjmp	.-70     	; 0x13e <main+0x18>

00000184 <mdio_pinStatus>:
@to set a specified bit |=  to clear specified bit &= ~
*/
void mdio_pinStatus(u8_t port,u8_t pin,u8_t pin_status)
{
	/*Switching over DIO PORTs*/
	switch(port)
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	f9 f0       	breq	.+62     	; 0x1c6 <mdio_pinStatus+0x42>
 188:	30 f0       	brcs	.+12     	; 0x196 <mdio_pinStatus+0x12>
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	a1 f1       	breq	.+104    	; 0x1f6 <mdio_pinStatus+0x72>
 18e:	83 30       	cpi	r24, 0x03	; 3
 190:	09 f4       	brne	.+2      	; 0x194 <mdio_pinStatus+0x10>
 192:	49 c0       	rjmp	.+146    	; 0x226 <mdio_pinStatus+0xa2>
 194:	08 95       	ret
	{
		case PORTA:
			/*switching over DIO pin status*/
			switch(pin_status)
 196:	41 30       	cpi	r20, 0x01	; 1
 198:	41 f0       	breq	.+16     	; 0x1aa <mdio_pinStatus+0x26>
 19a:	18 f0       	brcs	.+6      	; 0x1a2 <mdio_pinStatus+0x1e>
 19c:	42 30       	cpi	r20, 0x02	; 2
 19e:	51 f0       	breq	.+20     	; 0x1b4 <mdio_pinStatus+0x30>
 1a0:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRA |= pin;
 1a2:	8a b3       	in	r24, 0x1a	; 26
 1a4:	68 2b       	or	r22, r24
 1a6:	6a bb       	out	0x1a, r22	; 26
					break;
 1a8:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRA &= ~pin;
 1aa:	8a b3       	in	r24, 0x1a	; 26
 1ac:	60 95       	com	r22
 1ae:	68 23       	and	r22, r24
 1b0:	6a bb       	out	0x1a, r22	; 26
					break;
 1b2:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRA &= ~pin;
 1b4:	8a b3       	in	r24, 0x1a	; 26
 1b6:	96 2f       	mov	r25, r22
 1b8:	90 95       	com	r25
 1ba:	89 23       	and	r24, r25
 1bc:	8a bb       	out	0x1a, r24	; 26
					MDIO_PORTA |= pin;
 1be:	8b b3       	in	r24, 0x1b	; 27
 1c0:	68 2b       	or	r22, r24
 1c2:	6b bb       	out	0x1b, r22	; 27
					break;
 1c4:	08 95       	ret
			}
		    break;	
		
		case PORTB:
			switch(pin_status)
 1c6:	41 30       	cpi	r20, 0x01	; 1
 1c8:	41 f0       	breq	.+16     	; 0x1da <mdio_pinStatus+0x56>
 1ca:	18 f0       	brcs	.+6      	; 0x1d2 <mdio_pinStatus+0x4e>
 1cc:	42 30       	cpi	r20, 0x02	; 2
 1ce:	51 f0       	breq	.+20     	; 0x1e4 <mdio_pinStatus+0x60>
 1d0:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRB |= pin;
 1d2:	87 b3       	in	r24, 0x17	; 23
 1d4:	68 2b       	or	r22, r24
 1d6:	67 bb       	out	0x17, r22	; 23
					break;
 1d8:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRB &= ~pin;
 1da:	87 b3       	in	r24, 0x17	; 23
 1dc:	60 95       	com	r22
 1de:	68 23       	and	r22, r24
 1e0:	67 bb       	out	0x17, r22	; 23
					break;
 1e2:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRB &= ~pin;
 1e4:	87 b3       	in	r24, 0x17	; 23
 1e6:	96 2f       	mov	r25, r22
 1e8:	90 95       	com	r25
 1ea:	89 23       	and	r24, r25
 1ec:	87 bb       	out	0x17, r24	; 23
					MDIO_PORTB |= pin;
 1ee:	88 b3       	in	r24, 0x18	; 24
 1f0:	68 2b       	or	r22, r24
 1f2:	68 bb       	out	0x18, r22	; 24
					break;
 1f4:	08 95       	ret
			}
		    break;	
			
		case PORTC:
			switch(pin_status)
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	41 f0       	breq	.+16     	; 0x20a <mdio_pinStatus+0x86>
 1fa:	18 f0       	brcs	.+6      	; 0x202 <mdio_pinStatus+0x7e>
 1fc:	42 30       	cpi	r20, 0x02	; 2
 1fe:	51 f0       	breq	.+20     	; 0x214 <mdio_pinStatus+0x90>
 200:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRC |= pin;
 202:	84 b3       	in	r24, 0x14	; 20
 204:	68 2b       	or	r22, r24
 206:	64 bb       	out	0x14, r22	; 20
					break;
 208:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRA &= ~pin;
 20a:	8a b3       	in	r24, 0x1a	; 26
 20c:	60 95       	com	r22
 20e:	68 23       	and	r22, r24
 210:	6a bb       	out	0x1a, r22	; 26
					break;
 212:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRC &= ~pin;
 214:	84 b3       	in	r24, 0x14	; 20
 216:	96 2f       	mov	r25, r22
 218:	90 95       	com	r25
 21a:	89 23       	and	r24, r25
 21c:	84 bb       	out	0x14, r24	; 20
					MDIO_PORTC |= pin;
 21e:	85 b3       	in	r24, 0x15	; 21
 220:	68 2b       	or	r22, r24
 222:	65 bb       	out	0x15, r22	; 21
					break;
 224:	08 95       	ret
			}
		    break;
		
		case PORTD:
			switch(pin_status)
 226:	41 30       	cpi	r20, 0x01	; 1
 228:	41 f0       	breq	.+16     	; 0x23a <mdio_pinStatus+0xb6>
 22a:	18 f0       	brcs	.+6      	; 0x232 <mdio_pinStatus+0xae>
 22c:	42 30       	cpi	r20, 0x02	; 2
 22e:	51 f0       	breq	.+20     	; 0x244 <mdio_pinStatus+0xc0>
 230:	08 95       	ret
			{
				case OUTPUT:
					MDIO_DDRD |= pin;
 232:	82 b3       	in	r24, 0x12	; 18
 234:	68 2b       	or	r22, r24
 236:	62 bb       	out	0x12, r22	; 18
					break;
 238:	08 95       	ret
				
				case INPUT_FLOAT:
					MDIO_DDRD &= ~pin;
 23a:	82 b3       	in	r24, 0x12	; 18
 23c:	60 95       	com	r22
 23e:	68 23       	and	r22, r24
 240:	62 bb       	out	0x12, r22	; 18
					break;
 242:	08 95       	ret
					
				case INPUT_PULLUP:
					MDIO_DDRD &= ~pin;
 244:	82 b3       	in	r24, 0x12	; 18
 246:	96 2f       	mov	r25, r22
 248:	90 95       	com	r25
 24a:	89 23       	and	r24, r25
 24c:	82 bb       	out	0x12, r24	; 18
					MDIO_PORTD |= pin;
 24e:	82 b3       	in	r24, 0x12	; 18
 250:	68 2b       	or	r22, r24
 252:	62 bb       	out	0x12, r22	; 18
 254:	08 95       	ret

00000256 <mdio_setPinValue>:

/*this function is responsible for setting pin or pins for a dedicated value */
void mdio_setPinValue(u8_t port,u8_t pin,u8_t pin_value)//output
{
	/*Switching over DIO PORTs*/
	switch(port)
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	99 f0       	breq	.+38     	; 0x280 <mdio_setPinValue+0x2a>
 25a:	28 f0       	brcs	.+10     	; 0x266 <mdio_setPinValue+0x10>
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	e9 f0       	breq	.+58     	; 0x29a <mdio_setPinValue+0x44>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	41 f1       	breq	.+80     	; 0x2b4 <mdio_setPinValue+0x5e>
 264:	08 95       	ret
	{
		case PORTA:
		/*switching over DIO pin status*/
			switch(pin_value)
 266:	44 23       	and	r20, r20
 268:	31 f0       	breq	.+12     	; 0x276 <mdio_setPinValue+0x20>
 26a:	41 30       	cpi	r20, 0x01	; 1
 26c:	79 f5       	brne	.+94     	; 0x2cc <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTA |= pin;
 26e:	8b b3       	in	r24, 0x1b	; 27
 270:	68 2b       	or	r22, r24
 272:	6b bb       	out	0x1b, r22	; 27
					break;
 274:	08 95       	ret
			
				case LOW:
					MDIO_PORTA &= ~pin;
 276:	8b b3       	in	r24, 0x1b	; 27
 278:	60 95       	com	r22
 27a:	68 23       	and	r22, r24
 27c:	6b bb       	out	0x1b, r22	; 27
					break;
 27e:	08 95       	ret
			}
			break;
		
		case PORTB:
		/*switching over DIO pin status*/
			switch(pin_value)
 280:	44 23       	and	r20, r20
 282:	31 f0       	breq	.+12     	; 0x290 <mdio_setPinValue+0x3a>
 284:	41 30       	cpi	r20, 0x01	; 1
 286:	11 f5       	brne	.+68     	; 0x2cc <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTB |= pin;
 288:	88 b3       	in	r24, 0x18	; 24
 28a:	68 2b       	or	r22, r24
 28c:	68 bb       	out	0x18, r22	; 24
					break;
 28e:	08 95       	ret
			
				case LOW:
					MDIO_PORTB &= ~pin;
 290:	88 b3       	in	r24, 0x18	; 24
 292:	60 95       	com	r22
 294:	68 23       	and	r22, r24
 296:	68 bb       	out	0x18, r22	; 24
					break;
 298:	08 95       	ret
			}
			break;
		
		case PORTC:
		/*switching over DIO pin status*/
			switch(pin_value)
 29a:	44 23       	and	r20, r20
 29c:	31 f0       	breq	.+12     	; 0x2aa <mdio_setPinValue+0x54>
 29e:	41 30       	cpi	r20, 0x01	; 1
 2a0:	a9 f4       	brne	.+42     	; 0x2cc <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTC |= pin;
 2a2:	85 b3       	in	r24, 0x15	; 21
 2a4:	68 2b       	or	r22, r24
 2a6:	65 bb       	out	0x15, r22	; 21
					break;
 2a8:	08 95       	ret
			
				case LOW:
					MDIO_PORTC &= ~pin;
 2aa:	85 b3       	in	r24, 0x15	; 21
 2ac:	60 95       	com	r22
 2ae:	68 23       	and	r22, r24
 2b0:	65 bb       	out	0x15, r22	; 21
					break;
 2b2:	08 95       	ret
			}
			break;
		
		case PORTD:
		/*switching over DIO pin status*/
			switch(pin_value)
 2b4:	44 23       	and	r20, r20
 2b6:	31 f0       	breq	.+12     	; 0x2c4 <mdio_setPinValue+0x6e>
 2b8:	41 30       	cpi	r20, 0x01	; 1
 2ba:	41 f4       	brne	.+16     	; 0x2cc <mdio_setPinValue+0x76>
			{
				case HIGH:
					MDIO_PORTD |= pin;
 2bc:	82 b3       	in	r24, 0x12	; 18
 2be:	68 2b       	or	r22, r24
 2c0:	62 bb       	out	0x12, r22	; 18
					break;
 2c2:	08 95       	ret
			
				case LOW:
					MDIO_PORTD &= ~pin;
 2c4:	82 b3       	in	r24, 0x12	; 18
 2c6:	60 95       	com	r22
 2c8:	68 23       	and	r22, r24
 2ca:	62 bb       	out	0x12, r22	; 18
 2cc:	08 95       	ret

000002ce <mdio_togglePinValue>:
}

void mdio_togglePinValue(u8_t port,u8_t pin)
{
	/*Switching over DIO PORTs*/
	switch(port)
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	51 f0       	breq	.+20     	; 0x2e6 <mdio_togglePinValue+0x18>
 2d2:	28 f0       	brcs	.+10     	; 0x2de <mdio_togglePinValue+0x10>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	59 f0       	breq	.+22     	; 0x2ee <mdio_togglePinValue+0x20>
 2d8:	83 30       	cpi	r24, 0x03	; 3
 2da:	69 f0       	breq	.+26     	; 0x2f6 <mdio_togglePinValue+0x28>
 2dc:	08 95       	ret
	{
		case PORTA:
			MDIO_PORTA ^= pin;
 2de:	8b b3       	in	r24, 0x1b	; 27
 2e0:	68 27       	eor	r22, r24
 2e2:	6b bb       	out	0x1b, r22	; 27
			break;
 2e4:	08 95       	ret
		
		case PORTB:
			MDIO_PORTB ^= pin;
 2e6:	88 b3       	in	r24, 0x18	; 24
 2e8:	68 27       	eor	r22, r24
 2ea:	68 bb       	out	0x18, r22	; 24
			break;
 2ec:	08 95       	ret
		
		case PORTC:
			MDIO_PORTC ^= pin;
 2ee:	85 b3       	in	r24, 0x15	; 21
 2f0:	68 27       	eor	r22, r24
 2f2:	65 bb       	out	0x15, r22	; 21
			break;
 2f4:	08 95       	ret
		
		case PORTD:
			MDIO_PORTD ^= pin;
 2f6:	82 b3       	in	r24, 0x12	; 18
 2f8:	68 27       	eor	r22, r24
 2fa:	62 bb       	out	0x12, r22	; 18
 2fc:	08 95       	ret

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
